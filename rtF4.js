/**
 * exfscss
 * 
 * Credit: 
 *   - Figsh (Publisher)
 *   - David-Hux (Writer)
 *   - Current User (Implementer)
 * 
 * Resources:
 *   - fscss-ttr on dev.to
 *   - Figsh on codepen.io, stackoverflow.com
 *   - npm package: fscss (npm install fscss)
 *   - docs: fscss.onrender.com 
 * Version: source v6, package v1+
 * Last Edited: 11:29pm Tue Jun 17 2025
 * 
 * Note: Use official npm package/CDN instead of copying this directly.
 *       Contact: Facebook (FSCSS) for support.
 */function transformCssValues(css){let customProperties=new Set();let transformedCss=css;const copyRegex=/(:\s*)(["']?)(.*?)(["']?)\s*copy\(([-]?\d+),\s*([^\;^\)^\(^,^ ]*)\)/g;transformedCss=transformedCss.replace(copyRegex,(match,prefix,quote1,value,quote2,lengthStr,variableName)=>{const length=parseInt(lengthStr);let extractedValue='';if(length>=0){extractedValue=value.substring(0,length);}else{extractedValue=value.substring(value.length+length);}customProperties.add(`--${variableName.replace(/[^a-zA-Z0-9_-]/g,'')}:${extractedValue};`);return `${prefix}${quote1}${value}${quote2}`;});if(customProperties.size>0){const rootBlock=`:root{\n${Array.from(customProperties).join('\n')}\n}`;transformedCss+=`\n${rootBlock}`;}return transformedCss;} function repeatString(str,count){str=str.replace(/^['"]|['"]$/g,'');return str.repeat(Math.max(0,parseInt(count)))}function replaceRe(css){const reRegex = /(?:store|str|re)\(\s*([^:,]+)\s*[,:]\s*(?:"([^"]*)"|'([^']*)')\s*\)/gi;const variableMap = new Map();let cleanedCss=css.replace(reRegex, (match, variable, dqValue, sqValue)=>{const value = dqValue || sqValue;variable = variable.trim();variableMap.set(variable, value);return '';});if (variableMap.size === 0) return cleanedCss;let changed;let iterations = 0;const maxIterations = 100;let current = cleanedCss;do {changed = false;for (const [variable, value] of variableMap.entries()){const varRegex = new RegExp(`\\b${escapeRegExp(variable)}\\b`, 'g');const newCss=current.replace(varRegex, value);if(newCss !== current){changed=true;current=newCss;}}iterations++;}while(changed && iterations < maxIterations);if(iterations >= maxIterations){console.warn('Maximum iterations reached. Possible circular dependency.');}return current;}function escapeRegExp(string){return string.replace(/[.*+?^${}|[\]\\]/g, '\\$&');}function processStyles(){const styleElements=document.querySelectorAll('style');if(!styleElements.length){console.warn('No <style> elements found.');return}styleElements.forEach(element=>{let css=element.innerHTML;css=transformCssValues(css);css=css.replace(/(?:mxs|\$p)\((([^\,]*)\,)?(([^\,]*)\,)?(([^\,]*)\,)?(([^\,]*)\,)?(([^\,]*)\,)?(([^\,]*)\,\s*)?("([^"]*)"|'([^']*)')\)/gi,`$2:$14$15;$4:$14$15;$6:$14$15;$8:$14$15;$10:$14$15;$12:$14$15;`).replace(/(?:mx|\$m)\((([^\,]*)\,)?(([^\,]*)\,)?(([^\,]*)\,)?(([^\,]*)\,)?(([^\,]*)\,)?(([^\,]*)\,\s*)?("([^"]*)"|'([^']*)')\)/gi,`$2$14$15$4$14$15$6$14$15$8$14$15$10$14$15$12$14$15`).replace(/rpt\((\d+)\,\s*("([^"]*)"|'([^']*)')\)/gi,(match,count,quotedStr,doubleQuoted,singleQuoted)=>repeatString(quotedStr,count)).replace(/\$(([\_\-\d\w]+)\:(\"[^\"]*\"|\'[^\']*\'|[^\;]*)\;)/gi,`:root{--$1}`).replace(/\$([^\!\s]+)!/gi,`var(--$1)`).replace(/\$([\w\-\_\d]+)/gi,`var(--$1)`).replace(/\-\*\-(([^\:]+)\:(\"[^\"]*\"|\'[^\']*\'|[^\;]*)\;)/gi,`-webkit-$1-moz-$1-ms-$1-o-$1`).replace(/%i\((([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\]\[]*)\,)?(([^\,\]\[]*)\,)?(([^\,\[\]]*))?\s*\[([^\]\[]*)\]\)/gi,`$2$21$4$21$6$21$8$21$10$21$12$21$14$21$16$21$18$21$20$21`).replace(/%6\((([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\]\[]*)\,)?(([^\,\]\[]*)\,)?(([^\,\[\]]*))?\s*\[([^\]\[]*)\]\)/gi,`$2$13$4$13$6$13$8$13$10$13$12$13`).replace(/%5\((([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\]\[]*)\,)?(([^\,\]\[]*))?\s*\[([^\]\[]*)\]\)/gi,`$2$11$4$11$6$11$8$11$10$11`).replace(/%4\((([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*))?\s*\[([^\]\[]*)\]\)/gi,`$2$9$4$9$6$9$8$9`).replace(/%3\((([^\,\[\]]*)\,)?(([^\,\[\]]*)\,)?(([^\,\[\]]*))?\s*\[([^\]\[]*)\]\)/gi,`$2$7$4$7$6$7`).replace(/%2\((([^\,\[\]]*)\,)?(([^\,\]\[]*))?\s*\[([^\]\[]*)\]\)/gi,`$2$5$4$5`).replace(/%1\((([^\,\]\[]*))?\s*\[([^\]\[]*)\]\)/gi,`$2$3`).replace(/@import\(\s*\exec\((.*)(.{5})\)\s*\)/gi,`@import url("$1css")`).replace(/\$\(\s*@keyframes\s*(\S+)\)/gi,`$1{animation-name:$1;}@keyframes $1`).replace(/\$\(\s*(\@[\w\-\*]*)\s*([^\{\}\,&]*)(\s*,\s*[^\{\}&]*)?&?(\[([^\{\}]*)\])?\s*\)/gi,`$2$3{animation:$2 $5;}$1 $2`).replace(/\$\(\s*--([^\{\}]*)\)/gi,`$1`).replace(/\$\(([^\:]*):\s*([^\)\:]*)\)/gi,`[$1='$2']`).replace(/g\(([^"'\,]*)\,\s*(("([^"]*)"|'([^']*)')\,\s*)?("([^"]*)"|'([^']*)')\s*\)/gi,`$1 $4$5$1 $7$8`).replace(/\$\(([^\:]*):\s*([^\)\:]*)\)/gi,`[$1='$2']`).replace(/\$\(([^\:^\)]*)\)/gi,`[$1]`);css=replaceRe(css);element.innerHTML=css})}function processDrawElements(){const drawElements=document.querySelectorAll('.draw');drawElements.forEach(element=>{const currentColor=element.style.color||'#000';element.style.color='transparent';element.style.webkitTextStroke=`2px ${currentColor}`})}try{processStyles();processDrawElements()}catch(error){console.error('Error processing styles or draw elements:',error)}
